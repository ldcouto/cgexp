class MyTest is subclass of TestCase

instance variables

a : int := 0;
b : int := 0;

operations

public runFullSuite : () ==> ()
runFullSuite () == 
let	ts: TestSuite = new TestSuite(new MyTest()),
		result = new TestResult()
in
(
  ts.run(result);
  IO`print(result.toString());
);

--
-- Gets annotated using '@Before' in the generated code
--
public setUp : () ==> ()
setUp() ==
(
  a := 1;
  b := 2;
);

--
-- Gets annotated using '@After' in the generated code
--
public tearDown : () ==> ()
tearDown() ==
(
  a := -1;
  b := -1;
);

public testAddPos : () ==> ()
testAddPos () ==
let m = new Model()
in
  Assert`assertTrue("Expected m.add(a,b) to yield 3", m.add(a,b) = 3);
  
public testAddNeg : () ==> ()
testAddNeg () ==
let mk_(x,y) = mk_(-a,-b),
    m = new Model()
in
  Assert`assertTrue("Expected m.add(x,y) to yield -3", m.add(x,y) = -3);

--
-- The util ops do not get annotated with '@Test' when they are code generated
--
private utilOp1 : () ==> nat
utilOp1 () == return 0;

public static utilOp2 : () ==> nat
utilOp2 () == return 0;

end MyTest
